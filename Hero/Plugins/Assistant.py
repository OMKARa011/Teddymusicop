import random

from pyrogram import filters
from pyrogram.raw.functions.messages import DeleteHistory
from pyrogram.types import (CallbackQuery, InlineKeyboardButton,
                            InlineKeyboardMarkup, InlineQueryResultArticle,
                            InlineQueryResultPhoto, InputTextMessageContent,
                            Message)

from Hero import SUDOERS, app, random_assistant
from Hero.Database import get_assistant, save_assistant
from Hero.Utilities.assistant import get_assistant_details

__MODULE__ = "·¥Äss…™s·¥õ·¥Ä…¥·¥õ"
__HELP__ = f"""


`/checkassistant`
- ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á ·¥Ä ü ü·¥è·¥õ·¥á·¥Ö ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥è“ì  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ


**·¥è…¥ ü è “ì·¥è Ä s·¥ú·¥Ö·¥è ·¥ús·¥á Äs** üëáüèª

`/changeassistant` [·¥Äss …¥·¥ú·¥ç ô·¥á Ä]
- ·¥Ñ ú·¥Ä…¥…¢·¥á ·¥õ ú·¥á ·¥ò Ä·¥á·¥†…™·¥è…™·¥ús ·¥Ä ü ü·¥è·¥õ·¥á·¥Ö ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥õ·¥è …¥·¥á·¥° ·¥è…¥·¥á.

`/setassistant` [·¥Äss …¥·¥ú·¥ç ô·¥á Ä ·¥è Ä  Ä·¥Ä…¥·¥Ö·¥è·¥ç]
- s·¥á·¥õ ·¥Ä ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ “ì·¥è Ä ·¥Ñ ú·¥Ä·¥õ. 
"""


ass_num_list = ["1", "2", "3", "4", "5"]


@app.on_message(filters.command(["change", "changeassistant"]) & filters.user(SUDOERS))
async def assis_change(_, message: Message):
    usage = f"**Us·¥Ä…¢·¥á:**\n`/changeassistant` [ASS_NO]\n\nS·¥á ü·¥á·¥Ñ·¥õ “ì Ä·¥è·¥ç ·¥õ ú·¥á·¥ç\n{' | '.join(ass_num_list)}"
    if len(message.command) != 2:
        return await message.reply_text(usage)
    num = message.text.split(None, 1)[1].strip()
    if num not in ass_num_list:
        return await message.reply_text(usage)
    ass_num = int(message.text.strip().split()[1])
    _assistant = await get_assistant(message.chat.id, "assistant")
    if not _assistant:
        return await message.reply_text(
            "N·¥è ·¥ò Ä·¥á-s·¥Ä·¥†·¥á·¥Ö ·¥Äss…™s·¥õ·¥Ä…¥·¥õ “ì·¥è·¥ú…¥·¥Ö...\n\nY·¥è·¥ú ·¥Ñ·¥Ä…¥ s·¥á·¥õ ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥†…™·¥Ä /setassistant"
        )
    else:
        ass = _assistant["saveassistant"]
    assis = {
        "saveassistant": ass_num,
    }
    await save_assistant(message.chat.id, "assistant", assis)
    await message.reply_text(
        f"**C ú·¥Ä…¥…¢·¥á·¥Ö ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ‚úÖ**\n\nC ú·¥Ä…¥…¢·¥á·¥Ö ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ “ì Ä·¥è·¥ç **{ass}** ·¥õ·¥è ·¥Äss…™s·¥õ·¥Ä…¥·¥õ …¥·¥ú·¥ç ô·¥á Ä **{ass_num}**"
    )


ass_num_list2 = ["1", "2", "3", "4", "5", "Random"]


@app.on_message(filters.command(["set", "setassistant"]) & filters.user(SUDOERS))
async def assis_change(_, message: Message):
    usage = f"**Us·¥Ä…¢·¥á:**\n`/setassistant` [ASS_NO or Random]\n\nS·¥á ü·¥á·¥Ñ·¥õ “ì Ä·¥è·¥ç ·¥õ ú·¥á·¥ç\n{' | '.join(ass_num_list2)}\n\nUs·¥á 'Random' ·¥õ·¥è s·¥á·¥õ  Ä·¥Ä…¥·¥Ö·¥è·¥ç ·¥Äss…™s·¥õ·¥Ä…¥·¥õ"
    if len(message.command) != 2:
        return await message.reply_text(usage)
    query = message.text.split(None, 1)[1].strip()
    if query not in ass_num_list2:
        return await message.reply_text(usage)
    if str(query) == "Random":
        ran_ass = random.choice(random_assistant)
    else:
        ran_ass = int(message.text.strip().split()[1])
    _assistant = await get_assistant(message.chat.id, "assistant")
    if not _assistant:
        await message.reply_text(
            f"**__T·¥á·¥Ö·¥Ö è ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥Ä ü ü·¥è·¥õ·¥á·¥Ö__**\n\nAss…™s·¥õ·¥Ä…¥·¥õ …¥·¥è. **{ran_ass}**"
        )
        assis = {
            "saveassistant": ran_ass,
        }
        await save_assistant(message.chat.id, "assistant", assis)
    else:
        ass = _assistant["saveassistant"]
        return await message.reply_text(
            f"A Ä·¥á-s·¥Ä·¥†·¥á·¥Ö ·¥Äss…™s·¥õ·¥Ä…¥·¥õ …¥·¥ú·¥ç ô·¥á Ä {ass} “ì·¥è·¥ú…¥·¥Ö...\n\nY·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ñ ú·¥Ä…¥…¢·¥á ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥†…™·¥Ä /changeassistant"
        )


@app.on_message(filters.command("checkassistant") & filters.group)
async def check_ass(_, message: Message):
    _assistant = await get_assistant(message.chat.id, "assistant")
    if not _assistant:
        return await message.reply_text(
            "N·¥è ·¥ò Ä·¥á-s·¥Ä·¥†·¥á·¥Ö ·¥Äss…™s·¥õ·¥Ä…¥·¥õ “ì·¥è·¥ú…¥·¥Ö...\n\nY·¥è·¥ú ·¥Ñ·¥Ä…¥ s·¥á·¥õ ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥†…™·¥Ä /play"
        )
    else:
        ass = _assistant["saveassistant"]
        return await message.reply_text(
            f"P Ä·¥á-s·¥Ä·¥†·¥á·¥Ö ·¥Äss…™s·¥õ·¥Ä…¥·¥õ “ì·¥è·¥ú…¥·¥Ö\n\n Ass…™s·¥õ·¥Ä…¥·¥õ …¥·¥ú·¥ç ô·¥á Ä {ass} "
        )
